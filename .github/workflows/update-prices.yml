name: Daily Price Updates

on:
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC daily
  workflow_dispatch:  # Allow manual trigger

jobs:
  update-prices:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
      packages: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Git config
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install build semver twine
        
    - name: Update prices
      run: python update_prices.py
      
    - name: Check for changes
      id: git-check
      run: |
        git status --porcelain
        echo "changed=$(git status --porcelain | wc -l)" >> $GITHUB_OUTPUT
        
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
    - name: Bump package version
      if: steps.git-check.outputs.changed > 0
      id: bump-version
      run: |
        # Read current version from pyproject.toml
        CURRENT_VERSION=$(grep 'version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "Current version: $CURRENT_VERSION"
        
        # Increment patch version
        NEW_VERSION=$(python -c "import semver; print(semver.VersionInfo.parse('$CURRENT_VERSION').bump_patch())")
        echo "New version: $NEW_VERSION"
        
        # Update pyproject.toml with new version
        sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
        
        # Save new version for later use
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
    - name: Commit and push changes
      if: steps.git-check.outputs.changed > 0
      run: |
        git add .
        git commit -m "chore: Update token prices (${{ steps.date.outputs.date }})"
        git push origin HEAD:main
        
    - name: Create Release
      if: steps.git-check.outputs.changed > 0
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump-version.outputs.new_version }}
        release_name: Release v${{ steps.bump-version.outputs.new_version }}
        body: |
          Automated release for price updates on ${{ steps.date.outputs.date }}
          
          This release contains updated token prices from the latest API data.
        draft: false
        prerelease: false
        
    - name: Build package
      if: steps.git-check.outputs.changed > 0
      run: python -m build
      
    - name: Publish package to PyPI
      if: steps.git-check.outputs.changed > 0
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }} 